### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumWebsiteStatusFieldUpdateOperationsInput {
  set: WebsiteStatus
}

input EnumWebsiteStatusFilter {
  equals: WebsiteStatus
  in: [WebsiteStatus!]
  not: NestedEnumWebsiteStatusFilter
  notIn: [WebsiteStatus!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

scalar Json

type Mutation {
  createPage(data: PageCreateInput!): Page!
  createWebsite(
    defaultTheme: String! = "light"
    location: String!
    status: String! = "PRIVATE"
    title: String!
  ): Website
  deletePage(where: PageWhereUniqueInput!): Page
  deleteWebsite(id: Int!): Website
  updatePage(data: PageUpdateInput!, where: PageWhereUniqueInput!): Page
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateWebsite(
    defaultTheme: String
    id: Int!
    location: String
    status: WebsiteStatus
    title: String
  ): Website
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumWebsiteStatusFilter {
  equals: WebsiteStatus
  in: [WebsiteStatus!]
  not: NestedEnumWebsiteStatusFilter
  notIn: [WebsiteStatus!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Page {
  blocks: Json!
  createdAt: DateTime!
  id: Int!
  path: String!
  updatedAt: DateTime!
}

input PageCreateInput {
  blocks: Json!
  createdAt: DateTime
  path: String!
  updatedAt: DateTime
  website: WebsiteCreateOneWithoutPagesInput!
}

input PageCreateManyWithoutWebsiteInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutWebsiteInput!]
}

input PageCreateWithoutWebsiteInput {
  blocks: Json!
  createdAt: DateTime
  path: String!
  updatedAt: DateTime
}

input PageListRelationFilter {
  every: PageWhereInput
  none: PageWhereInput
  some: PageWhereInput
}

input PageScalarWhereInput {
  AND: [PageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PageScalarWhereInput!]
  OR: [PageScalarWhereInput!]
  path: StringFilter
  updatedAt: DateTimeFilter
  websiteId: IntFilter
}

input PageUpdateInput {
  blocks: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: WebsiteUpdateOneRequiredWithoutPagesInput
}

input PageUpdateManyDataInput {
  blocks: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PageUpdateManyWithoutWebsiteInput {
  connect: [PageWhereUniqueInput!]
  create: [PageCreateWithoutWebsiteInput!]
  delete: [PageWhereUniqueInput!]
  deleteMany: [PageScalarWhereInput!]
  disconnect: [PageWhereUniqueInput!]
  set: [PageWhereUniqueInput!]
  update: [PageUpdateWithWhereUniqueWithoutWebsiteInput!]
  updateMany: [PageUpdateManyWithWhereNestedInput!]
  upsert: [PageUpsertWithWhereUniqueWithoutWebsiteInput!]
}

input PageUpdateManyWithWhereNestedInput {
  data: PageUpdateManyDataInput!
  where: PageScalarWhereInput!
}

input PageUpdateWithoutWebsiteDataInput {
  blocks: Json
  createdAt: DateTimeFieldUpdateOperationsInput
  path: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PageUpdateWithWhereUniqueWithoutWebsiteInput {
  data: PageUpdateWithoutWebsiteDataInput!
  where: PageWhereUniqueInput!
}

input PageUpsertWithWhereUniqueWithoutWebsiteInput {
  create: PageCreateWithoutWebsiteInput!
  update: PageUpdateWithoutWebsiteDataInput!
  where: PageWhereUniqueInput!
}

input PageWhereInput {
  AND: [PageWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PageWhereInput!]
  OR: [PageWhereInput!]
  path: StringFilter
  updatedAt: DateTimeFilter
  website: WebsiteWhereInput
  websiteId: IntFilter
}

input PageWhereUniqueInput {
  id: Int
}

type Query {
  page(where: PageWhereUniqueInput!): Page
  pages(
    after: PageWhereUniqueInput
    before: PageWhereUniqueInput
    first: Int
    last: Int
  ): [Page!]!
  website(where: WebsiteWhereUniqueInput!): Website
  websites(
    after: WebsiteWhereUniqueInput
    before: WebsiteWhereUniqueInput
    first: Int
    last: Int
    orderBy: [WebsiteOrderByInput!]
    where: WebsiteWhereInput
  ): [Website!]!
}

enum QueryMode {
  default
  insensitive
}

"""
The types of user authorization roles
"""
enum Role {
  ADMIN
  DEVELOPER
  USER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: Int!
  image: String
  name: String
  role: Role!
  updatedAt: DateTime!
  website: Website
}

input UserCreateOneWithoutWebsiteInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWebsiteInput
}

input UserCreateWithoutWebsiteInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  role: Role
  updatedAt: DateTime
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  website: WebsiteUpdateOneWithoutUserInput
}

input UserUpdateOneRequiredWithoutWebsiteInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutWebsiteInput
  update: UserUpdateWithoutWebsiteDataInput
  upsert: UserUpsertWithoutWebsiteInput
}

input UserUpdateWithoutWebsiteDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutWebsiteInput {
  create: UserCreateWithoutWebsiteInput!
  update: UserUpdateWithoutWebsiteDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  website: WebsiteWhereInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type Website {
  defaultTheme: String!
  id: Int!
  pages(
    after: PageWhereUniqueInput
    before: PageWhereUniqueInput
    first: Int
    last: Int
  ): [Page!]!
  status: WebsiteStatus!
  title: String!
  user: User!
}

input WebsiteCreateOneWithoutPagesInput {
  connect: WebsiteWhereUniqueInput
  create: WebsiteCreateWithoutPagesInput
}

input WebsiteCreateWithoutPagesInput {
  createdAt: DateTime
  defaultTheme: String!
  location: String!
  status: WebsiteStatus
  title: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutWebsiteInput!
}

input WebsiteCreateWithoutUserInput {
  createdAt: DateTime
  defaultTheme: String!
  location: String!
  pages: PageCreateManyWithoutWebsiteInput
  status: WebsiteStatus
  title: String!
  updatedAt: DateTime
}

input WebsiteOrderByInput {
  createdAt: SortOrder
  defaultTheme: SortOrder
  id: SortOrder
  location: SortOrder
  status: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

"""
The website status.
"""
enum WebsiteStatus {
  PRIVATE
  PUBLISHED
}

input WebsiteUpdateOneRequiredWithoutPagesInput {
  connect: WebsiteWhereUniqueInput
  create: WebsiteCreateWithoutPagesInput
  update: WebsiteUpdateWithoutPagesDataInput
  upsert: WebsiteUpsertWithoutPagesInput
}

input WebsiteUpdateOneWithoutUserInput {
  connect: WebsiteWhereUniqueInput
  create: WebsiteCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: WebsiteUpdateWithoutUserDataInput
  upsert: WebsiteUpsertWithoutUserInput
}

input WebsiteUpdateWithoutPagesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultTheme: StringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  status: EnumWebsiteStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWebsiteInput
}

input WebsiteUpdateWithoutUserDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  defaultTheme: StringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  pages: PageUpdateManyWithoutWebsiteInput
  status: EnumWebsiteStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WebsiteUpsertWithoutPagesInput {
  create: WebsiteCreateWithoutPagesInput!
  update: WebsiteUpdateWithoutPagesDataInput!
}

input WebsiteUpsertWithoutUserInput {
  create: WebsiteCreateWithoutUserInput!
  update: WebsiteUpdateWithoutUserDataInput!
}

input WebsiteWhereInput {
  AND: [WebsiteWhereInput!]
  createdAt: DateTimeFilter
  defaultTheme: StringFilter
  id: IntFilter
  location: StringFilter
  NOT: [WebsiteWhereInput!]
  OR: [WebsiteWhereInput!]
  pages: PageListRelationFilter
  status: EnumWebsiteStatusFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input WebsiteWhereUniqueInput {
  id: Int
  location: String
  title: String
}
